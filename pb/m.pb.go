// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: m.proto

package pb

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MigrationPayload_Algorithm int32

const (
	MigrationPayload_ALGO_INVALID MigrationPayload_Algorithm = 0
	MigrationPayload_ALGO_SHA1    MigrationPayload_Algorithm = 1
)

var MigrationPayload_Algorithm_name = map[int32]string{
	0: "ALGO_INVALID",
	1: "ALGO_SHA1",
}

var MigrationPayload_Algorithm_value = map[string]int32{
	"ALGO_INVALID": 0,
	"ALGO_SHA1":    1,
}

func (x MigrationPayload_Algorithm) String() string {
	return proto.EnumName(MigrationPayload_Algorithm_name, int32(x))
}

func (MigrationPayload_Algorithm) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_28e37c38dd62f49b, []int{0, 0}
}

type MigrationPayload_OtpType int32

const (
	MigrationPayload_OTP_INVALID MigrationPayload_OtpType = 0
	MigrationPayload_OTP_HOTP    MigrationPayload_OtpType = 1
	MigrationPayload_OTP_TOTP    MigrationPayload_OtpType = 2
)

var MigrationPayload_OtpType_name = map[int32]string{
	0: "OTP_INVALID",
	1: "OTP_HOTP",
	2: "OTP_TOTP",
}

var MigrationPayload_OtpType_value = map[string]int32{
	"OTP_INVALID": 0,
	"OTP_HOTP":    1,
	"OTP_TOTP":    2,
}

func (x MigrationPayload_OtpType) String() string {
	return proto.EnumName(MigrationPayload_OtpType_name, int32(x))
}

func (MigrationPayload_OtpType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_28e37c38dd62f49b, []int{0, 1}
}

type MigrationPayload struct {
	OtpParameters []*MigrationPayload_OtpParameters `protobuf:"bytes,1,rep,name=otp_parameters,json=otpParameters,proto3" json:"otp_parameters,omitempty"`
	Version       int32                             `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
	BatchSize     int32                             `protobuf:"varint,3,opt,name=batch_size,json=batchSize,proto3" json:"batch_size,omitempty"`
	BatchIndex    int32                             `protobuf:"varint,4,opt,name=batch_index,json=batchIndex,proto3" json:"batch_index,omitempty"`
	BatchId       int32                             `protobuf:"varint,5,opt,name=batch_id,json=batchId,proto3" json:"batch_id,omitempty"`
}

func (m *MigrationPayload) Reset()         { *m = MigrationPayload{} }
func (m *MigrationPayload) String() string { return proto.CompactTextString(m) }
func (*MigrationPayload) ProtoMessage()    {}
func (*MigrationPayload) Descriptor() ([]byte, []int) {
	return fileDescriptor_28e37c38dd62f49b, []int{0}
}
func (m *MigrationPayload) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MigrationPayload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MigrationPayload.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MigrationPayload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MigrationPayload.Merge(m, src)
}
func (m *MigrationPayload) XXX_Size() int {
	return m.Size()
}
func (m *MigrationPayload) XXX_DiscardUnknown() {
	xxx_messageInfo_MigrationPayload.DiscardUnknown(m)
}

var xxx_messageInfo_MigrationPayload proto.InternalMessageInfo

func (m *MigrationPayload) GetOtpParameters() []*MigrationPayload_OtpParameters {
	if m != nil {
		return m.OtpParameters
	}
	return nil
}

func (m *MigrationPayload) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *MigrationPayload) GetBatchSize() int32 {
	if m != nil {
		return m.BatchSize
	}
	return 0
}

func (m *MigrationPayload) GetBatchIndex() int32 {
	if m != nil {
		return m.BatchIndex
	}
	return 0
}

func (m *MigrationPayload) GetBatchId() int32 {
	if m != nil {
		return m.BatchId
	}
	return 0
}

type MigrationPayload_OtpParameters struct {
	Secret    []byte                     `protobuf:"bytes,1,opt,name=secret,proto3" json:"secret,omitempty"`
	Name      string                     `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Issuer    string                     `protobuf:"bytes,3,opt,name=issuer,proto3" json:"issuer,omitempty"`
	Algorithm MigrationPayload_Algorithm `protobuf:"varint,4,opt,name=algorithm,proto3,enum=googleauth.MigrationPayload_Algorithm" json:"algorithm,omitempty"`
	Digits    int32                      `protobuf:"varint,5,opt,name=digits,proto3" json:"digits,omitempty"`
	Type      MigrationPayload_OtpType   `protobuf:"varint,6,opt,name=type,proto3,enum=googleauth.MigrationPayload_OtpType" json:"type,omitempty"`
	Counter   int64                      `protobuf:"varint,7,opt,name=counter,proto3" json:"counter,omitempty"`
}

func (m *MigrationPayload_OtpParameters) Reset()         { *m = MigrationPayload_OtpParameters{} }
func (m *MigrationPayload_OtpParameters) String() string { return proto.CompactTextString(m) }
func (*MigrationPayload_OtpParameters) ProtoMessage()    {}
func (*MigrationPayload_OtpParameters) Descriptor() ([]byte, []int) {
	return fileDescriptor_28e37c38dd62f49b, []int{0, 0}
}
func (m *MigrationPayload_OtpParameters) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MigrationPayload_OtpParameters) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MigrationPayload_OtpParameters.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MigrationPayload_OtpParameters) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MigrationPayload_OtpParameters.Merge(m, src)
}
func (m *MigrationPayload_OtpParameters) XXX_Size() int {
	return m.Size()
}
func (m *MigrationPayload_OtpParameters) XXX_DiscardUnknown() {
	xxx_messageInfo_MigrationPayload_OtpParameters.DiscardUnknown(m)
}

var xxx_messageInfo_MigrationPayload_OtpParameters proto.InternalMessageInfo

func (m *MigrationPayload_OtpParameters) GetSecret() []byte {
	if m != nil {
		return m.Secret
	}
	return nil
}

func (m *MigrationPayload_OtpParameters) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MigrationPayload_OtpParameters) GetIssuer() string {
	if m != nil {
		return m.Issuer
	}
	return ""
}

func (m *MigrationPayload_OtpParameters) GetAlgorithm() MigrationPayload_Algorithm {
	if m != nil {
		return m.Algorithm
	}
	return MigrationPayload_ALGO_INVALID
}

func (m *MigrationPayload_OtpParameters) GetDigits() int32 {
	if m != nil {
		return m.Digits
	}
	return 0
}

func (m *MigrationPayload_OtpParameters) GetType() MigrationPayload_OtpType {
	if m != nil {
		return m.Type
	}
	return MigrationPayload_OTP_INVALID
}

func (m *MigrationPayload_OtpParameters) GetCounter() int64 {
	if m != nil {
		return m.Counter
	}
	return 0
}

func init() {
	proto.RegisterEnum("googleauth.MigrationPayload_Algorithm", MigrationPayload_Algorithm_name, MigrationPayload_Algorithm_value)
	proto.RegisterEnum("googleauth.MigrationPayload_OtpType", MigrationPayload_OtpType_name, MigrationPayload_OtpType_value)
	proto.RegisterType((*MigrationPayload)(nil), "googleauth.MigrationPayload")
	proto.RegisterType((*MigrationPayload_OtpParameters)(nil), "googleauth.MigrationPayload.OtpParameters")
}

func init() { proto.RegisterFile("m.proto", fileDescriptor_28e37c38dd62f49b) }

var fileDescriptor_28e37c38dd62f49b = []byte{
	// 405 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x92, 0xc1, 0x8b, 0xd3, 0x40,
	0x14, 0xc6, 0x3b, 0x6d, 0xb7, 0xd9, 0xbc, 0xb6, 0x6b, 0x98, 0x83, 0x8c, 0x82, 0x31, 0x14, 0x91,
	0x20, 0x12, 0x70, 0x05, 0xf1, 0x1a, 0x59, 0x70, 0x0b, 0xab, 0x89, 0xb3, 0xc1, 0x6b, 0x99, 0x6d,
	0x86, 0x74, 0xa0, 0xc9, 0x84, 0xc9, 0x54, 0xec, 0xde, 0xbd, 0xfb, 0x67, 0xed, 0x71, 0x8f, 0x1e,
	0xa5, 0xfd, 0x47, 0x24, 0x93, 0x64, 0xb7, 0x7a, 0x70, 0x6f, 0xf3, 0x7b, 0xef, 0xfb, 0x3e, 0x3e,
	0x1e, 0x03, 0x56, 0x1e, 0x94, 0x4a, 0x6a, 0x89, 0x21, 0x93, 0x32, 0x5b, 0x73, 0xb6, 0xd1, 0xab,
	0xd9, 0xcd, 0x10, 0x9c, 0x4f, 0x22, 0x53, 0x4c, 0x0b, 0x59, 0xc4, 0x6c, 0xbb, 0x96, 0x2c, 0xc5,
	0x5f, 0xe0, 0x44, 0xea, 0x72, 0x51, 0x32, 0xc5, 0x72, 0xae, 0xb9, 0xaa, 0x08, 0xf2, 0x06, 0xfe,
	0xf8, 0xf4, 0x55, 0x70, 0xef, 0x0c, 0xfe, 0x75, 0x05, 0x91, 0x2e, 0xe3, 0x3b, 0x07, 0x9d, 0xca,
	0x43, 0xc4, 0x04, 0xac, 0x6f, 0x5c, 0x55, 0x42, 0x16, 0xa4, 0xef, 0x21, 0xff, 0x88, 0x76, 0x88,
	0x9f, 0x01, 0x5c, 0x31, 0xbd, 0x5c, 0x2d, 0x2a, 0x71, 0xcd, 0xc9, 0xc0, 0x2c, 0x6d, 0x33, 0xb9,
	0x14, 0xd7, 0x1c, 0x3f, 0x87, 0x71, 0xb3, 0x16, 0x45, 0xca, 0xbf, 0x93, 0xa1, 0xd9, 0x37, 0x8e,
	0x79, 0x3d, 0xc1, 0x4f, 0xe0, 0xb8, 0x15, 0xa4, 0xe4, 0xa8, 0x89, 0x6e, 0xb6, 0xe9, 0xd3, 0x1f,
	0x7d, 0x98, 0xfe, 0xd5, 0x0a, 0x3f, 0x86, 0x51, 0xc5, 0x97, 0x8a, 0x6b, 0x82, 0x3c, 0xe4, 0x4f,
	0x68, 0x4b, 0x18, 0xc3, 0xb0, 0x60, 0x39, 0x37, 0xdd, 0x6c, 0x6a, 0xde, 0xb5, 0x56, 0x54, 0xd5,
	0x86, 0x2b, 0x53, 0xca, 0xa6, 0x2d, 0xe1, 0x33, 0xb0, 0xd9, 0x3a, 0x93, 0x4a, 0xe8, 0x55, 0x6e,
	0xfa, 0x9c, 0x9c, 0xbe, 0xfc, 0xef, 0x61, 0xc2, 0x4e, 0x4d, 0xef, 0x8d, 0x75, 0x7a, 0x2a, 0x32,
	0xa1, 0xab, 0xb6, 0x74, 0x4b, 0xf8, 0x3d, 0x0c, 0xf5, 0xb6, 0xe4, 0x64, 0x64, 0x82, 0x5f, 0x3c,
	0x74, 0xf1, 0x64, 0x5b, 0x72, 0x6a, 0x1c, 0xf5, 0x89, 0x97, 0x72, 0x53, 0x68, 0xae, 0x88, 0xe5,
	0x21, 0x7f, 0x40, 0x3b, 0x9c, 0xbd, 0x06, 0xfb, 0xae, 0x03, 0x76, 0x60, 0x12, 0x5e, 0x7c, 0x8c,
	0x16, 0xf3, 0xcf, 0x5f, 0xc3, 0x8b, 0xf9, 0x99, 0xd3, 0xc3, 0x53, 0xb0, 0xcd, 0xe4, 0xf2, 0x3c,
	0x7c, 0xe3, 0xa0, 0xd9, 0x3b, 0xb0, 0xda, 0x60, 0xfc, 0x08, 0xc6, 0x51, 0x12, 0x1f, 0x48, 0x27,
	0x70, 0x5c, 0x0f, 0xce, 0xa3, 0x24, 0x76, 0x50, 0x47, 0x49, 0x4d, 0xfd, 0x0f, 0xe4, 0x66, 0xe7,
	0xa2, 0xdb, 0x9d, 0x8b, 0x7e, 0xef, 0x5c, 0xf4, 0x73, 0xef, 0xf6, 0x6e, 0xf7, 0x6e, 0xef, 0xd7,
	0xde, 0xed, 0x5d, 0x8d, 0xcc, 0xbf, 0x7b, 0xfb, 0x27, 0x00, 0x00, 0xff, 0xff, 0x0c, 0x4b, 0x37,
	0xde, 0x82, 0x02, 0x00, 0x00,
}

func (m *MigrationPayload) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MigrationPayload) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MigrationPayload) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BatchId != 0 {
		i = encodeVarintM(dAtA, i, uint64(m.BatchId))
		i--
		dAtA[i] = 0x28
	}
	if m.BatchIndex != 0 {
		i = encodeVarintM(dAtA, i, uint64(m.BatchIndex))
		i--
		dAtA[i] = 0x20
	}
	if m.BatchSize != 0 {
		i = encodeVarintM(dAtA, i, uint64(m.BatchSize))
		i--
		dAtA[i] = 0x18
	}
	if m.Version != 0 {
		i = encodeVarintM(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x10
	}
	if len(m.OtpParameters) > 0 {
		for iNdEx := len(m.OtpParameters) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OtpParameters[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintM(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *MigrationPayload_OtpParameters) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MigrationPayload_OtpParameters) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MigrationPayload_OtpParameters) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Counter != 0 {
		i = encodeVarintM(dAtA, i, uint64(m.Counter))
		i--
		dAtA[i] = 0x38
	}
	if m.Type != 0 {
		i = encodeVarintM(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x30
	}
	if m.Digits != 0 {
		i = encodeVarintM(dAtA, i, uint64(m.Digits))
		i--
		dAtA[i] = 0x28
	}
	if m.Algorithm != 0 {
		i = encodeVarintM(dAtA, i, uint64(m.Algorithm))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Issuer) > 0 {
		i -= len(m.Issuer)
		copy(dAtA[i:], m.Issuer)
		i = encodeVarintM(dAtA, i, uint64(len(m.Issuer)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintM(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Secret) > 0 {
		i -= len(m.Secret)
		copy(dAtA[i:], m.Secret)
		i = encodeVarintM(dAtA, i, uint64(len(m.Secret)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintM(dAtA []byte, offset int, v uint64) int {
	offset -= sovM(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MigrationPayload) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.OtpParameters) > 0 {
		for _, e := range m.OtpParameters {
			l = e.Size()
			n += 1 + l + sovM(uint64(l))
		}
	}
	if m.Version != 0 {
		n += 1 + sovM(uint64(m.Version))
	}
	if m.BatchSize != 0 {
		n += 1 + sovM(uint64(m.BatchSize))
	}
	if m.BatchIndex != 0 {
		n += 1 + sovM(uint64(m.BatchIndex))
	}
	if m.BatchId != 0 {
		n += 1 + sovM(uint64(m.BatchId))
	}
	return n
}

func (m *MigrationPayload_OtpParameters) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Secret)
	if l > 0 {
		n += 1 + l + sovM(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovM(uint64(l))
	}
	l = len(m.Issuer)
	if l > 0 {
		n += 1 + l + sovM(uint64(l))
	}
	if m.Algorithm != 0 {
		n += 1 + sovM(uint64(m.Algorithm))
	}
	if m.Digits != 0 {
		n += 1 + sovM(uint64(m.Digits))
	}
	if m.Type != 0 {
		n += 1 + sovM(uint64(m.Type))
	}
	if m.Counter != 0 {
		n += 1 + sovM(uint64(m.Counter))
	}
	return n
}

func sovM(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozM(x uint64) (n int) {
	return sovM(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MigrationPayload) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowM
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MigrationPayload: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MigrationPayload: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OtpParameters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowM
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthM
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthM
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OtpParameters = append(m.OtpParameters, &MigrationPayload_OtpParameters{})
			if err := m.OtpParameters[len(m.OtpParameters)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowM
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchSize", wireType)
			}
			m.BatchSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowM
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BatchSize |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchIndex", wireType)
			}
			m.BatchIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowM
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BatchIndex |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchId", wireType)
			}
			m.BatchId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowM
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BatchId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipM(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthM
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MigrationPayload_OtpParameters) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowM
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OtpParameters: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OtpParameters: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Secret", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowM
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthM
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthM
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Secret = append(m.Secret[:0], dAtA[iNdEx:postIndex]...)
			if m.Secret == nil {
				m.Secret = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowM
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthM
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthM
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Issuer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowM
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthM
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthM
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Issuer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Algorithm", wireType)
			}
			m.Algorithm = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowM
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Algorithm |= MigrationPayload_Algorithm(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Digits", wireType)
			}
			m.Digits = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowM
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Digits |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowM
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= MigrationPayload_OtpType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Counter", wireType)
			}
			m.Counter = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowM
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Counter |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipM(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthM
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipM(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowM
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowM
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowM
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthM
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupM
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthM
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthM        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowM          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupM = fmt.Errorf("proto: unexpected end of group")
)
